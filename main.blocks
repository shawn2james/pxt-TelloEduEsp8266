<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="I{C-+7NvD-YDy]UQPkZg" x="38" y="56"><statement name="HANDLER"><block type="TelloControl_flipInDirection" id="^rL9P5$9M[B;ag+]mMU_"><next><block type="typescript_statement" id="Eq,Wi#X/8ma1{)|;SoMD"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace TelloControl {" line1="" line2="    // Initialize the connection variables" line3="    let telloIP = &quot;192.168.10.1&quot;;" line4="    let commandPort = 8889;" line5="    let isConnected = false; // flag to check if connected previously" line6="" line7="    // Function to read and display response on the micro:bit" line8="    function readResponse(): void {" line9="        let response = serial.readString();" line10="        if (response.includes(&quot;OK&quot;)) {" line11="            if (!isConnected) {" line12="                basic.showString(&quot;Connected&quot;);" line13="                let isConnected2 = true;" line14="            }" line15="        } else {" line16="            basic.showString(&quot;Failed&quot;);" line17="            basic.showString(response); // Display the actual error" line18="        }" line19="    }" line20="" line21="    // Will only work after you connect to WiFi (connectToWifi function)" line22="    function sendCommandToTello(command: string): void {" line23="        sendAT(`AT+CIPSEND=${command.length}`, 500);  // Send command length and command" line24="        serial.writeString(command + &quot;\r\n&quot;); // Send the actual command" line25="        basic.pause(500);" line26="        readResponse(); // Display Tello's response" line27="    }" line28="" line29="    function sendAT(command: string, wait: number = 0) {" line30="        serial.writeString(`${command}\u000D\u000A`);" line31="        basic.pause(wait);" line32="    }" line33="" line34="    function setupUDPConnection(): void {" line35="        sendAT(`AT+CIPSTART=&quot;UDP&quot;,&quot;${telloIP}&quot;,${commandPort}`, 500);" line36="        basic.pause(500); // Allow some time for connection setup" line37="    }" line38="" line39="    // Function to initialize ESP8266 and redirect serial communication" line40="    //% block=&quot;Initialize ESP8266 with TX %tx| RX %rx&quot;" line41="    //% group=&quot;Connection&quot;" line42="    //% tx.defl=SerialPin.P8" line43="    //% rx.defl=SerialPin.P12" line44="    export function initESP8266(tx: SerialPin, rx: SerialPin): void {" line45="        serial.redirect(tx, rx, BaudRate.BaudRate115200); // Redirect TX and RX" line46="        basic.pause(100);" line47="        serial.setTxBufferSize(128);" line48="        serial.setRxBufferSize(128);" line49="        sendAT(&quot;AT+RST&quot;, 2000); // Reset the ESP8266" line50="        sendAT(&quot;AT+CWMODE=1&quot;, 500); // Set ESP8266 to Station Mode (STA mode)" line51="    }" line52="" line53="    enum FlipDirection {" line54="        Forward = &quot;f&quot;," line55="        Backward = &quot;b&quot;," line56="        Left = &quot;l&quot;," line57="        Right = &quot;r&quot;" line58="    }" line59="" line60="    //% block=&quot;Flip in direction %direction&quot;" line61="    //% group=&quot;Maneuvers&quot;" line62="    export function flipInDirection(direction: FlipDirection): void {" line63="        sendCommandToTello(`flip ${direction}`);" line64="    }" line65="" line66="    //% block=&quot;Emergency Stop&quot;" line67="    //% group=&quot;Maneuvers&quot;" line68="    export function emergency(): void {" line69="        sendCommandToTello(&quot;emergency&quot;);" line70="    }" line71="" line72="    //% block=&quot;Move Right $x cm&quot;" line73="    //% group=&quot;Maneuvers&quot;" line74="    export function right(x: number): void {" line75="        sendCommandToTello(`right ${x}`);" line76="    }" line77="" line78="    //% block=&quot;Move Left $x cm&quot;" line79="    //% group=&quot;Maneuvers&quot;" line80="    export function left(x: number): void {" line81="        sendCommandToTello(`left ${x}`);" line82="    }" line83="" line84="    //% block=&quot;Move Back $x cm&quot;" line85="    //% group=&quot;Maneuvers&quot;" line86="    export function back(x: number): void {" line87="        sendCommandToTello(`back ${x}`);" line88="    }" line89="" line90="    //% block=&quot;Move Forward $x cm&quot;" line91="    //% group=&quot;Maneuvers&quot;" line92="    export function forward(x:number): void {" line93="        sendCommandToTello(`forward ${x}`);" line94="    }" line95="" line96="    //% block=&quot;Go to $x $y $z at $speed&quot;" line97="    //% group=&quot;Maneuvers&quot;" line98="    export function goTo(x:number, y:number, z:number, speed:number): void {" line99="        sendCommandToTello(`go ${x} ${y} ${z} ${speed}`);" line100="    }" line101="" line102="    //% block=&quot;Rotate clockwise $deg degrees&quot;" line103="    //% group=&quot;Maneuvers&quot;" line104="    export function rotatecw(deg: number): void {" line105="        sendCommandToTello(`cw ${deg}`);" line106="    }" line107="" line108="    //% block=&quot;Rotate anti-clockwise $deg degrees&quot;" line109="    //% group=&quot;Maneuvers&quot;" line110="    export function rotateccw(deg: number): void {" line111="        sendCommandToTello(`ccw ${deg}`);" line112="    }" line113="" line114="    //% block=&quot;Land&quot;" line115="    //% group=&quot;Maneuvers&quot;" line116="    export function land(): void {" line117="        sendCommandToTello(&quot;land&quot;);" line118="    }" line119="" line120="    //% block=&quot;Takeoff&quot;" line121="    //% group=&quot;Maneuvers&quot;" line122="    export function takeOff(): void {" line123="        sendCommandToTello(&quot;takeoff&quot;);" line124="    }" line125="" line126="    //% block=&quot;Stop&quot;" line127="    //% group=&quot;Maneuvers&quot;" line128="    export function stop(): void {" line129="        sendCommandToTello(&quot;stop&quot;);" line130="    }" line131="" line132="    //% block=&quot;Wi-Fi connected&quot;" line133="    //% group=&quot;Connection&quot;" line134="    export function isWiFiConnected(): boolean {" line135="        sendAT(&quot;AT+CWJAP?&quot;); // Checks the current Wi-Fi status" line136="        basic.pause(500); // Give time to get the response" line137="        let response2 = serial.readString(); // Read response from ESP8266" line138="        if (response2.includes(&quot;No AP&quot;)) {" line139="            return false; // Not connected" line140="        } else if (response2.includes(&quot;OK&quot;) || response2.includes(&quot;Connected&quot;)) {" line141="            return true; // Connected" line142="        } else {" line143="            return false; // In case of other unexpected responses" line144="        }" line145="    }" line146="" line147="    // Connect to Tello Wi-Fi (1st block to use)" line148="    //% group=&quot;Connection&quot;" line149="    //% block=&quot;Connect to Tello Wi-Fi SSID %ssid&quot;" line150="    export function connectToWiFi(ssid: string): void {" line151="        setupUDPConnection(); // Set up UDP connection first between the devices" line152="        sendAT(`AT+CWJAP=&quot;${ssid}&quot;,&quot;&quot;`, 5000); // Assuming no password is required" line153="        readResponse(); // Display response on micro:bit" line154="        setupUDPConnection(); // Set up UDP connection again" line155="    }" line156="" line157="    // Initialize Tello to receive commands  (2nd block to use)" line158="    //% block=&quot;Initialize Tello into SDK mode&quot;" line159="    //% group=&quot;Connection&quot;" line160="    export function initialize(): void {" line161="        sendCommandToTello(&quot;command&quot;);" line162="    }" line163="}" numlines="164"></mutation></block></next></block></statement></block></xml>