<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="p#ej_gBdJu%7U{MoCks5" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="cSLts/v2Y^^7N:_,r9n1"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace TelloControl {" line1="" line2="    // Initialize the connection variables" line3="    let telloIP = &quot;192.168.10.1&quot;;" line4="    let commandPort = 8889;" line5="    let isConnected = false; // flag to check if connected previously" line6="" line7="    // Function to read and display response on the micro:bit" line8="    function readResponse(): void {" line9="        let response = serial.readString();" line10="        if (response.includes(&quot;OK&quot;)) {" line11="            if (!isConnected) {" line12="                basic.showString(&quot;Connected&quot;);" line13="                let isConnected2 = true;" line14="            }" line15="        } else {" line16="            basic.showString(&quot;Failed&quot;);" line17="            basic.showString(response); // Display the actual error" line18="        }" line19="    }" line20="" line21="    // Will only work after you connect to WiFi (connectToWifi function)" line22="    function sendCommandToTello(command: string): void {" line23="        sendAT(`AT+CIPSEND=${command.length}`, 500);  // Send command length and command" line24="        serial.writeString(command + &quot;\r\n&quot;); // Send the actual command" line25="        basic.pause(500);" line26="        readResponse(); // Display Tello's response" line27="    }" line28="" line29="    function sendAT(command: string, wait: number = 0) {" line30="        serial.writeString(`${command}\u000D\u000A`);" line31="        basic.pause(wait);" line32="    }" line33="" line34="    function setupUDPConnection(): void {" line35="        sendAT(`AT+CIPSTART=&quot;UDP&quot;,&quot;${telloIP}&quot;,${commandPort}`, 500);" line36="        basic.pause(500); // Allow some time for connection setup" line37="    }" line38="" line39="    // Function to initialize ESP8266 and redirect serial communication" line40="    //% block=&quot;Initialize ESP8266 with TX %tx| RX %rx&quot;" line41="    //% group=&quot;Connection&quot;" line42="    //% tx.defl=SerialPin.P8" line43="    //% rx.defl=SerialPin.P12" line44="    export function initESP8266(tx: SerialPin, rx: SerialPin): void {" line45="        serial.redirect(tx, rx, BaudRate.BaudRate115200); // Redirect TX and RX" line46="        basic.pause(100);" line47="        serial.setTxBufferSize(128);" line48="        serial.setRxBufferSize(128);" line49="        sendAT(&quot;AT+RST&quot;, 2000); // Reset the ESP8266" line50="        sendAT(&quot;AT+CWMODE=1&quot;, 500); // Set ESP8266 to Station Mode (STA mode)" line51="    }" line52="" line53="    //% block=&quot;Flip&quot;" line54="    //% group=&quot;Maneuvers&quot;" line55="    export function flip(): void {" line56="        sendCommandToTello(&quot;flip b&quot;);" line57="    }" line58="" line59="    //% block=&quot;Emergency Stop&quot;" line60="    //% group=&quot;Maneuvers&quot;" line61="    export function emergency(): void {" line62="        sendCommandToTello(&quot;emergency&quot;);" line63="    }" line64="" line65="    //% block=&quot;Move Right $x cm&quot;" line66="    //% group=&quot;Maneuvers&quot;" line67="    export function right(x: number): void {" line68="        sendCommandToTello(`right ${x}`);" line69="    }" line70="" line71="    //% block=&quot;Move Left $x cm&quot;" line72="    //% group=&quot;Maneuvers&quot;" line73="    export function left(x: number): void {" line74="        sendCommandToTello(`left ${x}`);" line75="    }" line76="" line77="    //% block=&quot;Move Back $x cm&quot;" line78="    //% group=&quot;Maneuvers&quot;" line79="    export function back(x: number): void {" line80="        sendCommandToTello(`back ${x}`);" line81="    }" line82="" line83="    //% block=&quot;Move Forward $x cm&quot;" line84="    //% group=&quot;Maneuvers&quot;" line85="    export function forward(x:number): void {" line86="        sendCommandToTello(`forward ${x}`);" line87="    }" line88="" line89="    //% block=&quot;Go to $x $y $z at $speed&quot;" line90="    //% group=&quot;Maneuvers&quot;" line91="    export function goTo(x:number, y:number, z:number, speed:number): void {" line92="        sendCommandToTello(`go ${x} ${y} ${z} ${speed}`);" line93="    }" line94="" line95="    //% block=&quot;Rotate clockwise $deg degrees&quot;" line96="    //% group=&quot;Maneuvers&quot;" line97="    export function rotatecw(deg: number): void {" line98="        sendCommandToTello(`cw ${deg}`);" line99="    }" line100="" line101="    //% block=&quot;Rotate anti-clockwise $deg degrees&quot;" line102="    //% group=&quot;Maneuvers&quot;" line103="    export function rotateccw(deg: number): void {" line104="        sendCommandToTello(`ccw ${deg}`);" line105="    }" line106="" line107="    //% block=&quot;Land&quot;" line108="    //% group=&quot;Maneuvers&quot;" line109="    export function land(): void {" line110="        sendCommandToTello(&quot;land&quot;);" line111="    }" line112="" line113="    //% block=&quot;Takeoff&quot;" line114="    //% group=&quot;Maneuvers&quot;" line115="    export function takeOff(): void {" line116="        sendCommandToTello(&quot;takeoff&quot;);" line117="    }" line118="" line119="    //% block=&quot;Stop&quot;" line120="    //% group=&quot;Maneuvers&quot;" line121="    export function stop(): void {" line122="        sendCommandToTello(&quot;stop&quot;);" line123="    }" line124="" line125="    //% block=&quot;Wi-Fi connected&quot;" line126="    //% group=&quot;Connection&quot;" line127="    export function isWiFiConnected(): boolean {" line128="        sendAT(&quot;AT+CWJAP?&quot;); // Checks the current Wi-Fi status" line129="        basic.pause(500); // Give time to get the response" line130="        let response2 = serial.readString(); // Read response from ESP8266" line131="        if (response2.includes(&quot;No AP&quot;)) {" line132="            return false; // Not connected" line133="        } else if (response2.includes(&quot;OK&quot;) || response2.includes(&quot;Connected&quot;)) {" line134="            return true; // Connected" line135="        } else {" line136="            return false; // In case of other unexpected responses" line137="        }" line138="    }" line139="" line140="    // Connect to Tello Wi-Fi (1st block to use)" line141="    //% group=&quot;Connection&quot;" line142="    //% block=&quot;Connect to Tello Wi-Fi SSID %ssid&quot;" line143="    export function connectToWiFi(ssid: string): void {" line144="        setupUDPConnection(); // Set up UDP connection first between the devices" line145="        sendAT(`AT+CWJAP=&quot;${ssid}&quot;,&quot;&quot;`, 5000); // Assuming no password is required" line146="        readResponse(); // Display response on micro:bit" line147="        setupUDPConnection(); // Set up UDP connection again" line148="    }" line149="" line150="    // Initialize Tello to receive commands  (2nd block to use)" line151="    //% block=&quot;Initialize Tello into SDK mode&quot;" line152="    //% group=&quot;Connection&quot;" line153="    export function initialize(): void {" line154="        sendCommandToTello(&quot;command&quot;);" line155="    }" line156="}" numlines="157"></mutation></block></statement></block></xml>